package project1.test;
// Generated by ComTest BEGIN
import static org.mockito.Mockito.*;
import static org.junit.Assert.*;
import org.junit.*;
import project1.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2025.06.29 16:24:49 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class GameSessionTest {



  // Generated by ComTest BEGIN
  /** testGetAnswer47 */
  @Test
  public void testGetAnswer47() {    // GameSession: 47
    InputHandler mockIH = mock(InputHandler.class); 
    ConsoleOutput mockCO = mock(ConsoleOutput.class); 
    GameSession answerTest = new GameSession(mockIH, mockCO); 
    assertEquals(0, answerTest.getAnswer()); 
    answerTest.setAnswer(14); assertEquals(14, answerTest.getAnswer()); 
    answerTest.setAnswer(2); assertEquals(2, answerTest.getAnswer()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetScore75 */
  @Test
  public void testGetScore75() {    // GameSession: 75
    InputHandler mockIH = mock(InputHandler.class); 
    ConsoleOutput mockCO = mock(ConsoleOutput.class); 
    GameSession scoreTest = new GameSession(mockIH, mockCO); 
    when(mockIH.readInt()).thenReturn(1); 
    assertEquals(0, scoreTest.getScore()); 
    scoreTest.setScore(-2); 
    assertEquals(0, scoreTest.getScore()); 
    scoreTest.setScore(5); 
    assertEquals(5, scoreTest.getScore()); 
    scoreTest.newSession(); 
    assertEquals(0, scoreTest.getScore()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAskToRestart114 */
  @Test
  public void testAskToRestart114() {    // GameSession: 114
    InputHandler mockIH = mock(InputHandler.class); 
    ConsoleOutput mockCO = mock(ConsoleOutput.class); 
    GameSession askToRestartTest = new GameSession(mockIH, mockCO); 
    when(mockIH.readInt()).thenReturn(1); 
    assertTrue(askToRestartTest.askToRestart()); 
    when(mockIH.readInt()).thenReturn(6); 
    assertFalse(askToRestartTest.askToRestart()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPlayOneSession139 */
  @Test
  public void testPlayOneSession139() {    // GameSession: 139
    InputHandler mockIH = mock(InputHandler.class); 
    ConsoleOutput mockCO = mock(ConsoleOutput.class); 
    GameSession sessionTest = new GameSession(mockIH, mockCO); 
    sessionTest.setAnswer(10); 
    when(mockIH.readInt()).thenReturn(3, 5, 7, 10); 
    sessionTest.playOneSession(); 
    assertEquals(4, sessionTest.getScore()); 
    verify(mockCO, atLeastOnce()).askTheGuess(); 
    verify(mockCO, atLeastOnce()).print(contains("too small")); 
    verify(mockCO, atLeastOnce()).print(contains("Yes")); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetTheGuess167 */
  @Test
  public void testGetTheGuess167() {    // GameSession: 167
    InputHandler mockIH = mock(InputHandler.class); 
    ConsoleOutput mockCO = mock(ConsoleOutput.class); 
    GameSession guessLoopTest = new GameSession(mockIH, mockCO); 
    guessLoopTest.setAnswer(10); 
    when(mockIH.readInt()).thenReturn(3, 15, 10); 
    guessLoopTest.getTheGuess(); 
    assertEquals(3, guessLoopTest.getScore()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testCheckTheAnswer201 */
  @Test
  public void testCheckTheAnswer201() {    // GameSession: 201
    InputHandler mockIH = mock(InputHandler.class); 
    ConsoleOutput mockCO = mock(ConsoleOutput.class); 
    GameSession answerCheck = new GameSession(mockIH, mockCO); 
    answerCheck.setAnswer(10); assertEquals(10, answerCheck.getAnswer()); 
    assertEquals(-1, answerCheck.checkTheAnswer(5)); 
    assertEquals(0, answerCheck.checkTheAnswer(10)); 
    assertEquals(1, answerCheck.checkTheAnswer(15)); 
    answerCheck.setAnswer(1); 
    assertEquals(1, answerCheck.checkTheAnswer(5)); 
    assertEquals(1, answerCheck.checkTheAnswer(2)); 
    assertEquals(0, answerCheck.checkTheAnswer(1)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testCreatePlayer289 */
  @Test
  public void testCreatePlayer289() {    // GameSession: 289
    InputHandler mockIH = mock(InputHandler.class); 
    ConsoleOutput mockCO = mock(ConsoleOutput.class); 
    GameSession playerTest = new GameSession(mockIH, mockCO); 
    assertEquals("Not yet created.", playerTest.getPlayerName()); 
    playerTest.createPlayer("Summer"); 
    assertEquals("SUMMER", playerTest.getPlayerName()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testSetRange345 */
  @Test
  public void testSetRange345() {    // GameSession: 345
    InputHandler mockIH = mock(InputHandler.class); 
    ConsoleOutput mockCO = mock(ConsoleOutput.class); 
    GameSession rangeTest = new GameSession(mockIH, mockCO); 
    rangeTest.setRange(0, 10); 
    assertEquals(0, rangeTest.getMin()); 
    assertEquals(10, rangeTest.getMax()); 
    rangeTest.setRange(17, -2); 
    assertEquals(-2, rangeTest.getMin()); 
    assertEquals(17, rangeTest.getMax()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPickNewNum376 */
  @Test
  public void testPickNewNum376() {    // GameSession: 376
    InputHandler mockIH = mock(InputHandler.class); 
    ConsoleOutput mockCO = mock(ConsoleOutput.class); 
    GameSession randomTest = new GameSession(mockIH, mockCO); 
    randomTest.setMin(1); 
    randomTest.setMax(10); 
    for(int i=0; i<10; i++){
    int num = randomTest.pickNewNum(); 
    assertTrue(num >= 1 && num <= 10); 
    }
    randomTest.setMin(1); 
    randomTest.setMax(1); 
    for(int i=0; i<5; i++){
    int num = randomTest.pickNewNum(); 
    assertEquals(1, num); 
    }
  } // Generated by ComTest END
}